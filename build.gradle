plugins {
    id 'java-library'
    id 'eclipse'
    id 'fabric-loom' version '1.3-SNAPSHOT' apply false
    id 'com.diffplug.eclipse.apt' version '3.42.2'
    id 'maven-publish'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'com.diffplug.eclipse.apt'
    apply plugin: 'maven-publish'

    version = rootProject.mod_version
    group = rootProject.maven_group

    base {
        archivesName = "${rootProject.archives_base_name}-${project.name}"
    }

    java {
        withSourcesJar()

        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = rootProject.maven_group
                artifactId = "nahara-modkit-${project.name}"
                version = "${rootProject.mod_version}-SNAPSHOT"
                from components.java
            }
        }

        repositories {
            mavenLocal()
        }
    }

    repositories {
        maven { url = 'https://jitpack.io/' }
    }

    // Don't apply Fabric Loom to annotation processor
    if (!project.name.startsWith('annotations-')) {
        apply plugin: 'fabric-loom'

        compileJava {
            options.compilerArgs << "-Anahara.modkit.expand=version:${project.version}"
        }

        loom {
            splitEnvironmentSourceSets()
        }

        dependencies {
            minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
            mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
            modApi "net.fabricmc:fabric-loader:${rootProject.loader_version}"
        }

        processResources {
            inputs.property "version", project.version

            filesMatching("fabric.mod.json") {
                expand "version": project.version
            }
        }
    } else {
        repositories {
            mavenCentral()
        }
    }
}

subprojects {
    eclipse {
        project.name = "Nahara Modkit - ${Character.toUpperCase(project.name.charAt(0))}${project.name.substring(1).replace('-', ' ')}"

        synchronizationTasks 'eclipseFactorypath'
    }
}

// Run thing haha yes
dependencies {
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_version"
    implementation annotationProcessor(project(':annotations-v1'))
}

subprojects.each { p ->
    if (p.name.startsWith('annotations-')) return;

    dependencies {
        implementation include(project(path: p.name, configuration: 'namedElements'))
    }
}
